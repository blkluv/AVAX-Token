/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ICropNftInterface extends utils.Interface {
  functions: {
    "availableMint()": FunctionFragment;
    "cropsName()": FunctionFragment;
    "description()": FunctionFragment;
    "expirationDate()": FunctionFragment;
    "farmerName()": FunctionFragment;
    "mintNFT()": FunctionFragment;
    "price()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalMint()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "availableMint"
      | "cropsName"
      | "description"
      | "expirationDate"
      | "farmerName"
      | "mintNFT"
      | "price"
      | "tokenURI"
      | "totalMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cropsName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmerName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "totalMint", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "availableMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cropsName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmerName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalMint", data: BytesLike): Result;

  events: {};
}

export interface ICropNft extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICropNftInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    cropsName(overrides?: CallOverrides): Promise<[string]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    expirationDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    farmerName(overrides?: CallOverrides): Promise<[string]>;

    mintNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalMint(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  availableMint(overrides?: CallOverrides): Promise<BigNumber>;

  cropsName(overrides?: CallOverrides): Promise<string>;

  description(overrides?: CallOverrides): Promise<string>;

  expirationDate(overrides?: CallOverrides): Promise<BigNumber>;

  farmerName(overrides?: CallOverrides): Promise<string>;

  mintNFT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalMint(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    availableMint(overrides?: CallOverrides): Promise<BigNumber>;

    cropsName(overrides?: CallOverrides): Promise<string>;

    description(overrides?: CallOverrides): Promise<string>;

    expirationDate(overrides?: CallOverrides): Promise<BigNumber>;

    farmerName(overrides?: CallOverrides): Promise<string>;

    mintNFT(overrides?: CallOverrides): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalMint(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    availableMint(overrides?: CallOverrides): Promise<BigNumber>;

    cropsName(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    expirationDate(overrides?: CallOverrides): Promise<BigNumber>;

    farmerName(overrides?: CallOverrides): Promise<BigNumber>;

    mintNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMint(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    availableMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cropsName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirationDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
