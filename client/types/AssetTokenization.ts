/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace AssetTokenization {
  export type NftContractDetailsStruct = {
    farmerAddress: PromiseOrValue<string>;
    farmerName: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    totalMint: PromiseOrValue<BigNumberish>;
    availableMint: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    expirationDate: PromiseOrValue<BigNumberish>;
  };

  export type NftContractDetailsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    farmerAddress: string;
    farmerName: string;
    description: string;
    totalMint: BigNumber;
    availableMint: BigNumber;
    price: BigNumber;
    expirationDate: BigNumber;
  };
}

export interface AssetTokenizationInterface extends utils.Interface {
  functions: {
    "buyNft(address)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "farmers(uint256)": FunctionFragment;
    "generateNftContract(string,string,uint256,uint256,uint256)": FunctionFragment;
    "getBuyers()": FunctionFragment;
    "getNftContractDetails(address)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyNft"
      | "checkUpkeep"
      | "farmers"
      | "generateNftContract"
      | "getBuyers"
      | "getNftContractDetails"
      | "performUpkeep"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyNft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateNftContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getBuyers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNftContractDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuyers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNftContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AssetTokenization extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetTokenizationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyNft(
      farmerAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    farmers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateNftContract(
      _farmerName: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _totalMint: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBuyers(overrides?: CallOverrides): Promise<[string[]]>;

    getNftContractDetails(
      farmerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AssetTokenization.NftContractDetailsStructOutput]>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyNft(
    farmerAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

  farmers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateNftContract(
    _farmerName: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _totalMint: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _expirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBuyers(overrides?: CallOverrides): Promise<string[]>;

  getNftContractDetails(
    farmerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AssetTokenization.NftContractDetailsStructOutput>;

  performUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNft(
      farmerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    farmers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateNftContract(
      _farmerName: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _totalMint: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyers(overrides?: CallOverrides): Promise<string[]>;

    getNftContractDetails(
      farmerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AssetTokenization.NftContractDetailsStructOutput>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyNft(
      farmerAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateNftContract(
      _farmerName: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _totalMint: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBuyers(overrides?: CallOverrides): Promise<BigNumber>;

    getNftContractDetails(
      farmerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNft(
      farmerAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateNftContract(
      _farmerName: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _totalMint: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBuyers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftContractDetails(
      farmerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
